
# Interfaces
int_if = "{{ internal_physical_interface }}"
ext_if = "{{ external_physical_interface }}"

icmp_types = "{ echoreq, unreach }"
limited_internet_access_ok_ports = "{ domain ntp }"
# www.studyladder.com.au and static.studyladder.com.au
# Move this to a file, eventually, and have it updated by cron
table <lia-web-exceptions> { 13.57.121.179, 52.52.157.221, 13.35.146.29, 13.35.146.37, 13.35.146.38, 13.35.146.58 }

# table containing all IP addresses assigned to the firewall
table <firewall> const { self }

# table for permitting timed internet access
table <limited-internet-access> persist

# don't filter on the loopback interface
set skip on lo0

# Queues. ADSL has 1020Kb/sec up. Let's cap at 900Kb/sec
queue ext on $ext_if bandwidth 900K
queue ext_dns parent ext bandwidth 10K min 10K
# Low-delay ToS (ACKs and interactive SSH)
queue ext_pri parent ext bandwidth 90K min 45K
queue ext_def parent ext bandwidth 800K max 800K flows 1024 default

# scrub incoming packets
match in all scrub (no-df random-id)

# Queue Assignment. Last match defines queue
# Low-delay ToS goes to a different queue
match out on $ext_if proto { tcp, udp } set queue(ext_def, ext_pri)
# prioritise dns
match out on $ext_if proto { tcp, udp } to port domain set queue ext_dns

# setup a default deny policy
block log

# activate spoofing protection for all interfaces
block in quick from urpf-failed

# pass all traffic to and from the local network.
pass in  on $int_if from $int_if:network modulate state
pass out on $int_if to $int_if:network modulate state

# Allow traffic to ADSL router
pass out on {{ external_physical_interface }} proto { tcp udp icmp } to 192.168.1.1 keep state

# pass tcp, udp, and icmp out on the external (Internet) interface.
# tcp connections will be modulated, udp/icmp will be tracked
# statefully.
pass out on $ext_if proto { tcp udp icmp } all modulate state

pass in on $ext_if proto tcp to ($ext_if) port ssh modulate state
pass in on $ext_if inet proto icmp icmp-type $icmp_types

# Constrain internet access for device in the limited-internet-access table
block in on $int_if from <limited-internet-access>
pass proto { tcp udp } from <limited-internet-access> to port $limited_internet_access_ok_ports
pass proto tcp from <limited-internet-access> to <lia-web-exceptions> port { http https }

# NAT outbound packets
match out on $ext_if from $int_if:network to any nat-to ($ext_if)
