
# Interfaces
int_if = "{{ internal_interface }}"
ext_if = "{{ external_interface }}"

lan_net = "192.168.20.0/24"

# table containing all IP addresses assigned to the firewall
table <firewall> const { self }

# table for permitting timed internet access
table <no-internet-access> persist

# SSH brute force blackhole
table <ssh-brute-force> persist

# don't filter on the loopback interface
set skip on lo0

block quick from <ssh-brute-force>

# Prohibit internet access for device in the no-internet-access table
block out quick on $ext_if from <no-internet-access>

# scrub incoming packets
match in all scrub (no-df random-id)

# outbound traffic prioritisation
# - prioritise low delay ToS packets
match out on $ext_if set prio (3, 4)
#
# prioritise interactive ssh (bulk ssh gets normal treatment)
match out on $ext_if proto tcp to port ssh set prio (3, 5)

# prioritise icmp
match out on $ext_if proto icmp set prio (6, 7)

# prioritise dns
match out on $ext_if proto { tcp, udp } to port domain set prio (6, 7)

# setup a default deny policy
block log

# activate spoofing protection for all interfaces
block in quick from urpf-failed

# only allow ssh connections from the local network if it's from the
# trusted computer, 192.168.0.15. use "block return" so that a TCP RST is
# sent to close blocked connections right away. use "quick" so that this
# rule is not overridden by the "pass" rules below.
#block return in quick on $int_if proto tcp from ! 192.168.0.15 \
#   to $int_if port ssh

# pass all traffic to and from the local network.
# these rules will create state entries due to the default
# "keep state" option which will automatically be applied.
pass in  on $int_if from $lan_net modulate state
pass out on $int_if to $lan_net modulate state

# pass tcp, udp, and icmp out on the external (Internet) interface.
# tcp connections will be modulated, udp/icmp will be tracked
# statefully.
pass out on $ext_if proto { tcp udp icmp } all modulate state

pass in on $ext_if proto tcp to ($ext_if) port ssh modulate state \
  (max-src-conn 10, max-src-conn-rate 5/5, \
   overload <ssh-brute-force> flush global)

# NAT outbound packets
match out on $ext_if from $int_if:network to any nat-to ($ext_if)



